<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FireantZhang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.fireantzhang.com/"/>
  <updated>2019-08-28T13:13:14.713Z</updated>
  <id>https://www.fireantzhang.com/</id>
  
  <author>
    <name>火蚁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你需要这么一款开源数据可视化工具助力数据跟踪分析</title>
    <link href="https://www.fireantzhang.com/2019/08/24/%E4%BD%A0%E9%9C%80%E8%A6%81%E8%BF%99%E4%B9%88%E4%B8%80%E6%AC%BE%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E5%8A%A9%E5%8A%9B%E6%95%B0%E6%8D%AE%E8%B7%9F%E8%B8%AA%E5%88%86%E6%9E%90/"/>
    <id>https://www.fireantzhang.com/2019/08/24/你需要这么一款开源数据可视化工具助力数据跟踪分析/</id>
    <published>2019-08-24T10:25:17.000Z</published>
    <updated>2019-08-28T13:13:14.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>文章开头，先做个小调查：平常工作中遇到需要追踪或者分析公司日常业务数据的时候【比如需要分析系统每日用户增长情况】，你们一般是使用怎么样的分析手段呢？大家可以先想想自己是怎么做的，这样的做法是否繁琐，有没有更好的方案。</p><p>在没遇到 Grafana 之前，遇到产品需要这个数据的时候，由于公司人力有限，没有开发人员开发数据平台，所以一般有几种处理方案：</p><ol><li>第一种方案，如果本身 APP 端有接入一些第三方数据统计平台【友盟、Bugly】，则可以让产品直接在这些平台看数据，<code>缺点是：这种平台的数据一般是指下载 APP 的，并非是真实的平台注册数</code>；</li><li>第二种方案，平台的精确的注册数据：每次写一下 Sql 语句按天分组直接从数据库导出产品需要时间内的用户注册情况，然后导出一个 Excel 表格给到产品，产品在做成可视化的折线图之类的来分析波动情况；</li><li>第三种方案，可能相对少一些重复工作，用 Python 脚本程序自动导出可视化结果图；</li></ol><h3 id="Grafana-登场"><a href="#Grafana-登场" class="headerlink" title="Grafana 登场"></a>Grafana 登场</h3><p>木有错，今天要介绍的主角是：Grafana，它是什么呢？Grafana 是一个通用的可视化 Go 编写的开源工具，通用的意思也就是说你可以添加各种数据源【不过得是目前支持的数据源，具体支持哪些数据源，后面会讲到】，安装部署也是非常非常的简单，基本是一条命令即可部署，以 mac 系统为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install grafana</span><br><span class="line">brew services start grafana</span><br></pre></td></tr></table></figure></p><p>是的，就是这么简单，经过三条命令，我们本地的系统已经部署好了，这时访问：<a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000</a>即可访问到部署好的 grafana，默认账号密码是：admin/admin，进去之后我们可以像堆积木一样一步步增加我们业务的数据看板，支持各种形式的展示方式：表格、曲线、饼状图等。</p><p>我们先来一个图，看一下官方的 <a href="https://play.grafana.org" target="_blank" rel="noopener">LiveDemo</a> 数据图，一睹惊艳的展示方式【哈，惊不惊艳的不重要，重要的是实用】：<br><img src="https://upload-images.jianshu.io/upload_images/215971-8b57684813e511b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="官方 LiveDemo"></p><h5 id="第一步：安装-Grafana"><a href="#第一步：安装-Grafana" class="headerlink" title="第一步：安装 Grafana"></a>第一步：安装 Grafana</h5><p>由于我的环境是 mac，所以这里只列出 mac 上通过 <code>brew</code> 的方式安装详情（其他系统安装可以参考官方给出的<a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">详细操作方式</a><br>）：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~ » brew install grafana</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/grafana-6.3.3.mojave.bottle.tar.gz</span><br><span class="line">Already downloaded: /Users/zhangdeyi/Library/Caches/Homebrew/downloads/2087dc91f087ca0d1314958797e3ef2696c575f081afb810393f74648d47942b--grafana-6.3.3.mojave.bottle.tar.gz</span><br><span class="line">==&gt; Pouring grafana-6.3.3.mojave.bottle.tar.gz</span><br><span class="line">Warning: grafana dependency icu4c was built with a different C++ standard</span><br><span class="line">library (libc++ from clang). This may cause problems at runtime.</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To have launchd start grafana now and restart at login:</span><br><span class="line">  brew services start grafana</span><br><span class="line">Or, if you don't want/need a background service you can just run:</span><br><span class="line">  grafana-server --config=/usr/local/etc/grafana/grafana.ini --homepath /usr/local/share/grafana --packaging=brew cfg:default.paths.logs=/usr/local/var/log/grafana cfg:default.paths.data=/usr/local/var/lib/grafana cfg:default.paths.plugins=/usr/local/var/lib/grafana/plugins</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/grafana/6.3.3: 3,635 files, 171.8MB</span><br></pre></td></tr></table></figure></p><h4 id="第二步：添加数据源"><a href="#第二步：添加数据源" class="headerlink" title="第二步：添加数据源"></a>第二步：添加数据源</h4><p>安装完之后，可以根据自己的实际情况，先添加自己业务的数据源，一般常用的数据源是 MySQL：<br><img src="https://upload-images.jianshu.io/upload_images/215971-f1fde901aca91db3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加一个MySQL的数据源"><br>初次安装只包含了这些数据源类型：<br><img src="https://upload-images.jianshu.io/upload_images/215971-564ddc180eef48cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="默认支持的数据源"><br>当然也可以安装一些其他数据源的 <code>plugins</code> 来支持更多的：<a href="https://grafana.com/grafana/plugins?type=datasource" target="_blank" rel="noopener">数据源</a></p><h4 id="第三步：-新增我们的业务-Dashboard"><a href="#第三步：-新增我们的业务-Dashboard" class="headerlink" title="第三步： 新增我们的业务 Dashboard"></a>第三步： 新增我们的业务 Dashboard</h4><p>有了数据源之后，就可以增加业务 Dashboard，入口：主页 –&gt; ➕号 –&gt; Create Dashboard，比如我把 Dashboard 命名成 MyCoreData，一个 Dashboard 可以由不同展示类型的 <code>Panel</code> 组成：<br><img src="https://upload-images.jianshu.io/upload_images/215971-95d18baa924f830f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Panel 类型"><br>平常我用得比较多的是 <code>Graph</code>，这个展示形式比较方便看出业务数据的波动情况：<br><img src="https://upload-images.jianshu.io/upload_images/215971-fa46257145ffafce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Panel 操作菜单"></p><p>点击操作菜单的 <code>Edit</code> 即可进入面板的编辑模式，这个模式可以对面板重命名，编写业务SQL，展示细节调整，编辑面板如下所示：<br><img src="https://upload-images.jianshu.io/upload_images/215971-9a916117158c8345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编辑面板"></p><ul><li>General tab 可以设置面板的标题信息、表述信息等；</li><li>Metrics tab 可以选择数据源，编写SQL 语句：有两种模式，一种是手动选操作，另外一种是直接编写 SQL 模式【推荐用这种模式】，点击 <code>Show Help</code> 可以查看提供的内置函数：<br><img src="https://upload-images.jianshu.io/upload_images/215971-afef734e2468f858.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="内置的函数"><br>编写完 SQL 之后，展示形式是这样的（时间选择的是这个月的）：<br><img src="https://upload-images.jianshu.io/upload_images/215971-78a2e3d26d3b83e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Graph 展示形式"><br>这种展示形式已经大致能看出趋势，是否可以有更好的展示形式呢，答案是有的，点击 <code>Legend</code> tab 可以设置展示一些更加详细的形式，比如用 <code>table</code> 的形式，展示出 <code>total</code>、<code>avg</code>，<code>current</code> 这些值，最终效果如下所示：<br><img src="https://upload-images.jianshu.io/upload_images/215971-718d6b7d0bf481be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更加形象的展示"><br>当然还有其他更细节的设置，可以自行探索，其他的面板展示形式也可以自行探索；<h4 id="第五步：分配账号，并管理好不同账号的查看权限"><a href="#第五步：分配账号，并管理好不同账号的查看权限" class="headerlink" title="第五步：分配账号，并管理好不同账号的查看权限"></a>第五步：分配账号，并管理好不同账号的查看权限</h4>很棒！经过前面一步的：增加业务 Dashboard，接下来我们就可以分配账号给产品和Boss们，并根据不同的角色分配不同的 Dashboard 查看权限。</li></ul><p>使用 <code>admin</code> 账号登录，可以分配不同的账号权限，入口：左边的设置按钮 –&gt; Server Admin –&gt; Users –&gt; Add new user，<br><img src="https://upload-images.jianshu.io/upload_images/215971-041c001fb1950ef4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="增加账号"></p><p>具体 Dashboard 的权限设置入口：以管理员账号访问某个 Dashboard –&gt; 右上角的设置按钮 –&gt; Permissions 按钮 –&gt; Add Permission 即可管理这个 Dashboard 的访问权限：<br><img src="https://upload-images.jianshu.io/upload_images/215971-a1a786e0d0226b55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dashboard 权限管理"></p><h3 id="最后想说的"><a href="#最后想说的" class="headerlink" title="最后想说的"></a>最后想说的</h3><p>好啦！当我们搭建好这样一个平台之后，我们不再需要重复之前的繁琐的导数据工作，而且产品和 Boss 也可以开心愉快的实时查询公司的各项业务数据，我们只需要专注在上面添砖加瓦：增加各个业务数据的细分 Dashboard。</p><p>今天的安利 Grafana 的文章先写到这里，写得相对比较糙，不少细节没怎么介绍，不过今天的主要目的也是为了给大家演示一下如何用这个平台来提升自己的工作效率，方便同事之间的数据沟通工作。</p><p>最后的最后，如果你所在的团队或者公司还没有一个比较完备的数据平台，真心推荐你们可以搭建探索一下（跟进业务数据，或者监控服务器运行情况都是可以的），如果在探索过程中有遇到什么问题，可以在文章的后面留言，我这边会尽量为大家解答。</p><p>好啦，祝大家周末愉快，准备出门吃小龙虾去啦~~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;文章开头，先做个小调查：平常工作中遇到需要追踪或者分析公司日常业务数据的时候【比如需要分析系统每日用户增长情况】，你们一般是使用怎么样的分析
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你知道 adb 的无线方式开发模式吗？让你摆脱 USB 线的束缚</title>
    <link href="https://www.fireantzhang.com/2019/05/11/%E4%BD%A0%E7%9F%A5%E9%81%93-adb-%E7%9A%84%E6%97%A0%E7%BA%BF%E6%96%B9%E5%BC%8F%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E5%90%97%EF%BC%9F%E8%AE%A9%E4%BD%A0%E6%91%86%E8%84%B1-USB-%E7%BA%BF%E7%9A%84%E6%9D%9F%E7%BC%9A/"/>
    <id>https://www.fireantzhang.com/2019/05/11/你知道-adb-的无线方式开发模式吗？让你摆脱-USB-线的束缚/</id>
    <published>2019-05-11T09:37:06.000Z</published>
    <updated>2019-05-11T18:22:30.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开发场景"><a href="#开发场景" class="headerlink" title="开发场景"></a>开发场景</h3><p>做Android开发的基本都知道，平常一般都是直接通过 USB 线或者 Type C线的方式连接，来完成日常的开发和调试，这种开发模式存在几个问题点，是一个极简主义者所不能忍受的</p><ul><li>电脑的 USB 口比较少，特别是 MAC 电脑，新版的就更是少得可怜；</li><li>有时候有些功能模块比较耗电的时候，手机耗电的速度会比电脑充电的速度慢，比如开发直播间模块，要长时间开摄像头的情况下；</li><li>开发好功能点，有时候要拿给同事看效果的时候也不太方便，隔着几个工位的时候，经常要拔掉线；</li></ul><h3 id="解决方案：开始使用-adb-WiFi-调试模式"><a href="#解决方案：开始使用-adb-WiFi-调试模式" class="headerlink" title="解决方案：开始使用 adb WiFi 调试模式"></a>解决方案：开始使用 adb WiFi 调试模式</h3><p>使用 adb WiFi 调试模式，通过以下几个步骤即可完成（开始这些配置之前先确保你的 adb 环境是配置好的）：</p><ol><li>确保 Android 手机和电脑连接的是同一局域网的 WiFi；</li><li>通过 USB 线连接 Android 手机；</li><li><p>设置手机侦听端口 5555 上的 TCP/IP 连接：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb tcpip 5555</span><br></pre></td></tr></table></figure><p> ※ 注意: 如果有多个手机连接在电脑上，需要用 -s ‘serial_number’ 参数指定目标手机，比如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb -s &apos;04157df4d349bf21&apos; tcpip 5555</span><br></pre></td></tr></table></figure><p> 在命令行中看到 TCP mode port: 5555 就表示监听成功：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~/Downloads » adb tcpip 5555 </span><br><span class="line">restarting <span class="keyword">in</span> TCP mode port: 5555</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">~/Downloads » adb -s <span class="string">'04157df4d349bf21'</span> tcpip 5555</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">~/Downloads » adb -s <span class="string">'04157df4d349bf21'</span> tcpip 5555</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">~/Downloads » adb -s <span class="string">'04157df4d349bf21'</span> tcpip 5555</span><br><span class="line">restarting <span class="keyword">in</span> TCP mode port: 5555</span><br><span class="line">------------------------------------------------------------</span><br></pre></td></tr></table></figure></li><li><p>通过 connect 命令和 IP 地址以及端口号连接到目标手机，比如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb connect 192.168.1.146:5555</span><br></pre></td></tr></table></figure><p> 当看到 connected to xxx:5555 的提示语就表示连接成功：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/Downloads » adb connect 192.168.1.146:5555</span><br><span class="line">connected to 192.168.1.146:5555</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">~/Downloads »</span><br></pre></td></tr></table></figure></li><li><p>拔掉 USB 线，验证一下，看到如下提示语，那么恭喜你，已成功打开 adb WiFi 的大门，可以开始畅游你的无线调试之旅啦。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~/Downloads » adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">192.168.1.146:5555device</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">~/Downloads »</span><br></pre></td></tr></table></figure></li></ol><h3 id="敲命令行的你很酷很帅，不过-IDE-Plugins-的方式能让你更舒畅"><a href="#敲命令行的你很酷很帅，不过-IDE-Plugins-的方式能让你更舒畅" class="headerlink" title="敲命令行的你很酷很帅，不过 IDE Plugins 的方式能让你更舒畅"></a>敲命令行的你很酷很帅，不过 IDE Plugins 的方式能让你更舒畅</h3><p>上面介绍的是 adb 无线连接的基本实现，不过每次都得经历那些步骤，体验不是很好，能否有一种方式，直接在 Android Studio 中直接鼠标点点的快速方式来完成呢？答案：木有错，有得。</p><h5 id="AS-中插件市场的搜索结果，关键词：adb-wifi"><a href="#AS-中插件市场的搜索结果，关键词：adb-wifi" class="headerlink" title="AS 中插件市场的搜索结果，关键词：adb wifi"></a>AS 中插件市场的搜索结果，关键词：adb wifi</h5><p><img src="https://upload-images.jianshu.io/upload_images/215971-4486c3554a5cd8c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h5 id="全部都安装体验之后，最终只有两款能够顺利操作完成连接的：ADB-WiFi-Connect、WIFI-ADB-ULITIMATE，对比各种优缺点之后，最终只留下：WIFI-ADB-ULITIMATE"><a href="#全部都安装体验之后，最终只有两款能够顺利操作完成连接的：ADB-WiFi-Connect、WIFI-ADB-ULITIMATE，对比各种优缺点之后，最终只留下：WIFI-ADB-ULITIMATE" class="headerlink" title="全部都安装体验之后，最终只有两款能够顺利操作完成连接的：ADB WiFi Connect、WIFI ADB ULITIMATE，对比各种优缺点之后，最终只留下：WIFI ADB ULITIMATE"></a>全部都安装体验之后，最终只有两款能够顺利操作完成连接的：ADB WiFi Connect、WIFI ADB ULITIMATE，对比各种优缺点之后，最终只留下：WIFI ADB ULITIMATE</h5><ul><li>WIFI ADB ULITIMATE（可用，推荐使用这个）<br>  <img src="https://upload-images.jianshu.io/upload_images/215971-0413705166559a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WIFI ADB ULITIMATE"></li><li>ADB WiFi Connect（可用）<br>  <img src="https://upload-images.jianshu.io/upload_images/215971-91402aeb764f7e01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ADB WiFi Connect"></li></ul><h5 id="两款插件的使用对比结论，供大家快速选择适合自己的那一款【毕竟青菜萝卜，各有所好】"><a href="#两款插件的使用对比结论，供大家快速选择适合自己的那一款【毕竟青菜萝卜，各有所好】" class="headerlink" title="两款插件的使用对比结论，供大家快速选择适合自己的那一款【毕竟青菜萝卜，各有所好】"></a>两款插件的使用对比结论，供大家快速选择适合自己的那一款【毕竟青菜萝卜，各有所好】</h5><table><thead><tr><th>对比点</th><th>WIFI ADB ULITIMATE</th><th>ADB WiFi Connect</th></tr></thead><tbody><tr><td>入口</td><td>run 旁边，每次使用打开一个新的对话框</td><td>操作窗口依附在 IDE 的右边工具窗口中，操作比较方便</td></tr><tr><td>功能点</td><td>连接、断开连击、记录连接设备、设备断开自动刷新</td><td>连接【以及主动输入目标 IP 地址的连接方式】、断开连接、USB 线和 WIFI 两种连接方式的设备分组展示、自动记录最近的 10 次连接记录</td></tr><tr><td>优点</td><td>设备断开和连接，自动刷新、操作直接 Log 提示</td><td>操作窗口固定、自动记录、可以手动输入 IP 地址进行连接</td></tr><tr><td>缺点</td><td>操作窗口是独立 Java 窗口程序，不跟随 IDE、需要手动点 Save</td><td>设备断开需要手动刷新才能识别出新的连接情况【后续期望作者能够加上自动监听】</td></tr></tbody></table><h3 id="最后，再提两点关于-adb-的事情"><a href="#最后，再提两点关于-adb-的事情" class="headerlink" title="最后，再提两点关于 adb 的事情"></a>最后，再提两点关于 adb 的事情</h3><ul><li>关于 adb 使用，谷歌官方的说明文档: <a href="https://developer.android.com/studio/command-line/adb" target="_blank" rel="noopener">https://developer.android.com/studio/command-line/adb</a></li><li>在找 adb wifi 插件的时候，还发现一款跟 adb 相关的插件（提供一些跟当前开发项目app常用的操作），觉得挺好用：ADB Idea，操作选项如下：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ADB Revoke Permissions</span><br><span class="line">ADB Revoke Permissions and Restart</span><br><span class="line">ADB Grant Permissions</span><br><span class="line">ADB Uninstall App</span><br><span class="line">ADB Kill App</span><br><span class="line">ADB Start App</span><br><span class="line">ADB ReStart App</span><br><span class="line">ADB Clear App Data</span><br><span class="line">ADB Start App With Debugger</span><br><span class="line">ADB Restart App With Debugger</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开发场景&quot;&gt;&lt;a href=&quot;#开发场景&quot; class=&quot;headerlink&quot; title=&quot;开发场景&quot;&gt;&lt;/a&gt;开发场景&lt;/h3&gt;&lt;p&gt;做Android开发的基本都知道，平常一般都是直接通过 USB 线或者 Type C线的方式连接，来完成日常的开发和调试，这
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.fireantzhang.com/2019/05/11/hello-world/"/>
    <id>https://www.fireantzhang.com/2019/05/11/hello-world/</id>
    <published>2019-05-11T09:18:54.553Z</published>
    <updated>2019-05-11T17:49:26.830Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
